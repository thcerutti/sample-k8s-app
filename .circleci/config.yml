# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/reference/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/guides/orchestrate/jobs-steps/#jobs-overview & https://circleci.com/docs/reference/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/guides/execution-managed/executor-intro/ & https://circleci.com/docs/reference/configuration-reference/#executor-job
    docker:
      # Specify the version you desire here
      # See: https://circleci.com/developer/images/image/cimg/base
      - image: cimg/base:current

    # Add steps to the job
    # See: https://circleci.com/docs/guides/orchestrate/jobs-steps/#steps-overview & https://circleci.com/docs/reference/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

  build-and-push-api:
    docker:
      - image: cimg/base:stable
    environment:
      IMAGE_NAME: thcerutti/sample-k8s-app-api
      DOCKER_BUILDKIT: 1
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Docker version
          command: docker version
      - run:
          name: Login Docker Hub
          command: |
            [ -n "$DOCKERHUB_USERNAME" ] || { echo "DOCKERHUB_USERNAME ausente"; exit 1; }
            [ -n "$DOCKERHUB_TOKEN" ] || { echo "DOCKERHUB_TOKEN ausente"; exit 1; }
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Calcular tags
          command: |
            GIT_SHA=$(git rev-parse --short HEAD)
            echo "export GIT_SHA=$GIT_SHA" >> $BASH_ENV
            echo "Tags: $IMAGE_NAME:latest e $IMAGE_NAME:$GIT_SHA"
      - run:
          name: Build imagem API
          command: |
            echo "Usando buildkit=$DOCKER_BUILDKIT"
            docker build \
              --progress=plain \
              -t $IMAGE_NAME:latest \
              -t $IMAGE_NAME:${GIT_SHA} \
              ./api
      - run:
          name: Push imagens
          command: |
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:${GIT_SHA}
      - run:
          name: Sumário
          command: |
            echo "Pushed $IMAGE_NAME:latest"
            echo "Pushed $IMAGE_NAME:${GIT_SHA}"

  build-and-push-frontend:
    docker:
      - image: cimg/base:stable
    environment:
      IMAGE_NAME: thcerutti/sample-k8s-app-frontend
      DOCKER_BUILDKIT: 1
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Docker version
          command: docker version
      - run:
          name: Login Docker Hub
          command: |
            [ -n "$DOCKERHUB_USERNAME" ] || { echo "DOCKERHUB_USERNAME ausente"; exit 1; }
            [ -n "$DOCKERHUB_TOKEN" ] || { echo "DOCKERHUB_TOKEN ausente"; exit 1; }
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Calcular tags
          command: |
            GIT_SHA=$(git rev-parse --short HEAD)
            echo "export GIT_SHA=$GIT_SHA" >> $BASH_ENV
            echo "Tags: $IMAGE_NAME:latest e $IMAGE_NAME:$GIT_SHA"
      - run:
          name: Build imagem Frontend
          command: |
            echo "Usando buildkit=$DOCKER_BUILDKIT"
            docker build \
              --progress=plain \
              -t $IMAGE_NAME:latest \
              -t $IMAGE_NAME:${GIT_SHA} \
              ./frontend
      - run:
          name: Push imagens
          command: |
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:${GIT_SHA}
      - run:
          name: Sumário
          command: |
            echo "Pushed $IMAGE_NAME:latest"
            echo "Pushed $IMAGE_NAME:${GIT_SHA}"

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/guides/orchestrate/workflows/ & https://circleci.com/docs/reference/configuration-reference/#workflows
workflows:
  version: 2
  build-and-publish:
    jobs:
      - build-and-push-api:
          filters:
            branches:
              only: main
      - build-and-push-frontend:
          filters:
            branches:
              only: main
      - say-hello:
          filters:
            branches:
              only: main
